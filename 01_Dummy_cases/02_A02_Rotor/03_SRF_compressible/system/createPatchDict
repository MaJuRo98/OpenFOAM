/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      createPatchDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// This application/dictionary does the following:
// - Creates new patches from boundary faces, either specified as a set of
//   existing patches or as a faceSet.
// - Orders faces on coupled patches such that they are opposite. This is done
//   for all coupled faces, not just for any patches created.
// - Optional: Synchronises points on coupled patches.
// - Removes any zero-sized non-coupled patches that were not added.

// Optional: Do a synchronisation of coupled points after creation of any
// patches; defaults to false. Note: this does not work with points that are on
// multiple coupled patches with transformations (i.e. cyclics).
pointSync false;

// Optional: Write cyclic matches into .obj format; defaults to false.
writeCyclicMatch false;

// Patches to create
patches
(
    {
        // Name of new patch
        name PER_1;

        // Dictionary to construct new patch from
        patchInfo
        {
            type cyclicAMI;
            neighbourPatch PER_2;

            // Optional: Explicitly set the transformation.
            transformType rotational;
            rotationAxis (0 0 1);
            rotationCentre (0 0 0);
            // transformType translational;
            // separation (1 0 0);

            // Optional: Non-default tolerance to prevent ordering failure
            // errors on poor meshes
            // matchTolerance 1e-2;
        }

        // How to construct: either from 'patches' or 'set'
        constructFrom patches;

        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (PER1);

    }
    {
        // Name of new patch
        name PER_2;

        // Dictionary to construct new patch from
        patchInfo
        {
            type cyclicAMI;
            neighbourPatch PER_1;

            // Optional: Explicitly set the transformation.
            transformType rotational;
            rotationAxis (0 0 1);
            rotationCentre (0 0 0);
            // transformType translational;
            // separation (-1 0 0);
        }

        // How to construct: either from 'patches' or 'set'
        constructFrom patches;

        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (PER2);

    }
    {
        // Name of new patch
        name SHROUD_TIP_GGI_SIDE_1;

        // Dictionary to construct new patch from
        patchInfo
        {
            type cyclicAMI;
            neighbourPatch SHROUD_TIP_GGI_SIDE_2;

            // Optional: Explicitly set the transformation.
            transformType rotational;
            rotationAxis (0 0 1);
            rotationCentre (0 0 0);
            // transformType translational;
            // separation (1 0 0);

            // Optional: Non-default tolerance to prevent ordering failure
            // errors on poor meshes
            // matchTolerance 1e-2;
        }

        // How to construct: either from 'patches' or 'set'
        constructFrom patches;

        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (SHROUD_TIP_GGI_SIDE1);

    }
    {
        // Name of new patch
        name SHROUD_TIP_GGI_SIDE_2;

        // Dictionary to construct new patch from
        patchInfo
        {
            type cyclicAMI;
            neighbourPatch SHROUD_TIP_GGI_SIDE_1;

            // Optional: Explicitly set the transformation.
            transformType rotational;
            rotationAxis (0 0 1);
            rotationCentre (0 0 0);
            // transformType translational;
            // separation (-1 0 0);
        }

        // How to construct: either from 'patches' or 'set'
        constructFrom patches;

        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (SHROUD_TIP_GGI_SIDE2);

    }

);

// ************************************************************************* //
